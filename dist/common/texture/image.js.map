{"version":3,"sources":["src/texture/image.js"],"names":[],"mappings":";;;;;;;;;;qBAA6B,UAAU;;kCACd,wBAAwB;;;;IAE3C,YAAY;AACL,WADP,YAAY,CACJ,OAAO,EAAE;0BADjB,YAAY;;;AAGd,QAAI,CAAC,KAAK,GAAG,OANT,KAAK,CAMU,WAAW,EAAE,CAAC;AACjC,QAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AACtB,QAAI,CAAC,MAAM,GAAG,WARH,OAAO,CAQQ,CAAC,EAAE,CAAC,CAAC,CAAC;AAChC,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACf,QAAI,CAAC,MAAM,GAAG,CAAC,CAAC;;AAEhB,QAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,UAAM,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;AACtC,SAAG,EAAE,eAAY;AACf,eAAO,QAAQ,CAAC;OACjB;AACD,SAAG,EAAE,aAAU,KAAK,EAAE;;;AACpB,gBAAQ,GAAG,KAAK,CAAC;;;AAGjB,YAAI,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC;AACtB,WAAG,CAAC,GAAG,GAAG,QAAQ,CAAC;;AAEnB,WAAG,CAAC,MAAM,GAAG,YAAM;AACjB,gBAAK,IAAI,GAAG,GAAG,CAAC;AAChB,gBAAK,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;AACvB,gBAAK,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;AACzB,gBAAK,QAAQ,GAAG,IAAI,CAAC;;AAErB,iBAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;SACjC,CAAC;OACH;AACD,gBAAU,EAAE,IAAI;KACjB,CAAC,CAAC;GACJ;;AAlCG,cAAY,WAoChB,MAAM,GAAA,kBAAG;AACP,WAAO,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;GAC/B;;AAtCG,cAAY,WAwChB,QAAQ,GAAA,oBAAG;AACT,WAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;GACjC;;SA1CG,YAAY;;;AA6ClB,gCAAa,YAAY,CAAC,CAAC;;qBAEZ,YAAY","file":"src/texture/image.js","sourcesContent":["import {Color, Vector2} from '../types';\r\nimport serializable from '../mixins/serializable';\r\n\r\nclass TextureImage {\r\n  constructor(texture) {\r\n    // The default values for `image`\r\n    this.color = Color.transparent();\r\n    this.drawable = false;\r\n    this.offset = new Vector2(0, 0);\r\n    this.data = null;\r\n    this.width = 0;\r\n    this.height = 0;\r\n\r\n    var filename = '';\r\n\r\n    Object.defineProperty(this, 'filename', {\r\n      get: function () {\r\n        return filename;\r\n      },\r\n      set: function (value) {\r\n        filename = value;\r\n\r\n        // TODO: Most of this should already be handled by the preloader\r\n        var img = new Image();\r\n        img.src = filename;\r\n\r\n        img.onload = () => {\r\n          this.data = img;\r\n          this.width = img.width;\r\n          this.height = img.height;\r\n          this.drawable = true;\r\n\r\n          texture.trigger('image-loaded');\r\n        };\r\n      },\r\n      enumerable: true\r\n    });\r\n  }\r\n\r\n  toJSON() {\r\n    return serialize.toJSON(this);\r\n  }\r\n\r\n  toString() {\r\n    return serialize.toString(this);\r\n  }\r\n}\r\n\r\nserializable(TextureImage);\r\n\r\nexport default TextureImage;\r\n"]}