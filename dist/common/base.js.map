{"version":3,"sources":["src/base.js"],"names":[],"mappings":"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","file":"src/base.js","sourcesContent":["import EventMap from 'eventmap';\n\nimport {Input} from 'gamebox';\n\nimport Audio from './audio';\nimport Group from './group';\nimport World from './world';\n\nvar objectIndex = 0;\n\nvar prependMax = 10000;\n\nvar numToIdString = function(num) {\n  var stringNum = num + '';\n\n  if (num >= prependMax) {\n    return stringNum;\n  } else {\n    var prependLength = (prependMax + '').length - stringNum.length;\n    for (var i = 0; i < prependLength; i++) {\n      stringNum = '0' + stringNum;\n    }\n\n    return stringNum;\n  }\n};\n\nclass Base extends EventMap {\n  constructor(type = 'Base', descriptor = function() {}) {\n    super();\n\n    // Count up `objectIndex` and stringify it\n    var currentObject = numToIdString(++objectIndex);\n\n    this.type = type;\n\n    var internalId = `${this.type}-${Date.now()}-${currentObject}`;\n\n    this.name = internalId;\n\n    // The `id` property is read-only and returns the type and the stringified object index\n    Object.defineProperty(this, 'id', {\n      get: function() {\n        return internalId;\n      },\n      enumerable: true\n    });\n\n    // Save the descriptor\n    this.descriptor = descriptor;\n\n    // Create a new group for all children elements\n    this.children = new Group();\n\n    // Add a queue: All addable elements will be pushed into the queue first and called after everything else in\n    // the `descriptor` has been called\n    this.queue = [];\n\n    this.parent = null;\n\n    // `Input` should be available in instances derived from `Base`\n    this.input = Input;\n\n    // As should `Audio`\n    this.audio = Audio;\n\n    // Emit an event\n    this.trigger('constructed');\n  }\n\n  apply(data) {\n    // TODO: Reflect if function check should be enforced here\n    if (this.descriptor) {\n      // If args is not an array or array-like, provide an empty one\n      data = data || {};\n\n      // Call the `descriptor` property with `args`\n\n      debugger;\n      \n      // object, {data, World}\n      this.descriptor.call(this, this, {data, World});\n\n      // Trigger an event\n      this.trigger('execute');\n\n      // TODO: Impose an order in the queue, such as:\n      // (Game) -> Scene -> GameObject -> Behavior -> Model\n\n      // TODO: Implement z-order\n      this.queue.forEach(function(q) {\n        q && q();\n      });\n\n      // Reset the queue\n      this.queue = [];\n\n      // Find a way to directly before and after events\n      this.trigger('executed');\n    }\n  }\n\n  call() {\n    // Call `Base#apply` with the arguments object\n    this.apply(arguments);\n  }\n\n  // Alias for `Base#call`\n  reset() {\n    return this.call.apply(this, arguments);\n  }\n\n  closest() {\n\n  }\n\n  find() {\n\n  }\n\n  log() {\n    if (console && console.log) {\n      var argArray = [].slice.call(arguments);\n\n      // Log with `console.log`: Prepend the type and name\n      argArray.unshift(':');\n      argArray.unshift(this.name);\n      argArray.unshift(this.type);\n\n      return console.log.apply(console, argArray);\n    }\n  }\n}\n\nBase.queueOrder = ['Game', 'Scene', 'GameObject', 'Behavior', 'Model'];\n\nexport default Base;\n"]}