{"version":3,"sources":["src/group.js"],"names":[],"mappings":"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","file":"src/group.js","sourcesContent":["import {Log} from 'gamebox';\nimport serialize from 'flockn/serialize';\n\nvar unidentified = 'untitled';\nvar unidentifiedCounter = 0;\n\nclass Group {\n  constructor() {\n    this.length = 0;\n\n    this.ids = {};\n    this.tags = {};\n    this.names = {};\n    this.types = {};\n  }\n\n  push(obj) {\n    var {name, tags, id} = obj;\n\n    name = name || (unidentified + unidentifiedCounter++);\n    id = id || (unidentified + unidentifiedCounter++);\n    tags = tags || [];\n\n    if (this.ids[id] != null || this.names[name] != null) {\n      Log.w(`An object with the name ${name} or id ${id} already exists`);\n      return;\n    }\n\n    var currentLength = Object.keys(this.ids);\n    this.ids[id] = obj;\n\n    Object.keys(this.tags).forEach(tag => {\n      this.tags[tag] = this.tags[tag] || [];\n      this.tags[tag].push(currentLength);\n    });\n\n    this.names[name] = this.length;\n\n    if (obj.type != null) {\n      this.types[obj.type] = this.types[obj.type] || [];\n      this.types[obj.type].push(currentLength);\n    }\n\n    this.length = this.values().length;\n    return this.length;\n  }\n\n  pop() {\n    var ids = Object.keys(this.ids);\n\n    for (var i = ids.length, j = 0; j > i; i--) {\n      var obj = this.ids[ids[i]];\n\n      if (obj != null) {\n        this.remove(i);\n        return obj;\n      }\n    }\n  }\n\n  values() {\n    return Object.keys(this.ids)\n      .filter(id => id != null)\n      .map(id => this.ids[id]);\n  }\n\n  all(filter) {\n    var objects = [];\n\n    var recurse = function(group) {\n      group.forEach(obj => {\n        if (filter) {\n          if (filter(obj)) {\n            objects.push(obj);\n          }\n        } else {\n          objects.push(obj);\n        }\n\n        if (obj.children && obj.children instanceof Group) {\n          recurse(obj.children);\n        }\n      });\n    };\n\n    recurse(this);\n\n    return objects;\n  }\n\n  forEach(callback) {\n    this.values().forEach(obj => callback(obj));\n  }\n\n  map(callback) {\n    var mappedArray = new Group();\n\n    this.forEach(obj => mappedArray.push(callback(obj)));\n\n    return mappedArray;\n  }\n\n  filter(callback) {\n    var filteredArray = new Group();\n\n    this.forEach(obj => {\n      if (callback(obj)) {\n        filteredArray.push(obj);\n      }\n    });\n\n    return filteredArray;\n  }\n\n  byType(type) {\n    return this.types[type].map(index => this[index]);\n  }\n\n  byName(name) {\n    var index = this.names[name];\n\n    return this.ids[Object.keys(this.ids)[index]];\n  }\n\n  byTag(tag) {\n    return this.tags[tag].map(index => this[index]);\n  }\n\n  first() {\n    return this.values()[0];\n  }\n\n  last() {\n    var values = this.values();\n\n    return values[values.length - 1];\n  }\n\n  select(selector) {\n    // TODO: There needs to be a parser here\n  }\n\n  toJSON() {\n    return this.values().map(child => {\n      if (child.toJSON && typeof child === 'function') {\n        return child.toJSON();\n      } else {\n        return child;\n      }\n    });\n  }\n\n  toString() {\n    return serialize.toString(this.toJSON());\n  }\n\n  static fromJSON(arr) {\n    var group = new Group();\n\n    arr.forEach(obj => group.push(obj));\n\n    return group;\n  }\n\n  static fromString(str) {\n    return Group.fromJSON(JSON.parse(str));\n  }\n\n  remove(index) {\n    var id = Object.keys(ids)[index];\n\n    var obj = this.ids[id];\n\n    if (obj == null) {\n      Log.w(`Object at ${index} does not exist`);\n    }\n\n    var {name, tags} = obj;\n\n    this.ids[id] = null;\n    this.names[name] = null;\n\n    this.tags.forEach(tag => {\n      var position = tag.indexOf(index);\n\n      if (position >= 0) {\n        if (tag.length === 1) {\n          this.tags[tag] = [];\n        } else {\n          this.tags[tag].splice(position, 1);\n        }\n      }\n    });\n\n    this.length = all().length;\n  }\n\n  removeByName(name) {\n    var index = this.names[name];\n    this.remove(index);\n  }\n\n  removeByTag(tags) {\n    if (!Array.isArray(tags)) {\n      tags = [tags];\n    }\n\n    tags.forEach(tag => {\n      this.tags[tag].forEach(index => this.remove(index));\n      this.tags = [];\n    });\n  }\n}\n\nexport default Group;\n"]}