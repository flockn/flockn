{"version":3,"sources":["src/game.js"],"names":[],"mappings":"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","file":"src/game.js","sourcesContent":["import {Loop, AssetLoader} from 'gamebox';\r\n\r\nimport Base from './base';\r\nimport Graphics from './graphics';\r\nimport Scene from './scene';\r\nimport Color from './types/color';\r\nimport Viewport from './viewport';\r\n\r\nimport {addable, renderable, updateable, serializable} from './mixins';\r\n\r\nvar root = window;\r\n\r\n// Game is the entry point for all games made with flockn.\r\n// Any number of `Scene` instances can be attached to a `Game` instance\r\nclass Game extends Base {\r\n  constructor(descriptor) {\r\n    // Extend the `Base` class\r\n    super('Game', descriptor);\r\n\r\n    // `this.container` is a string, which is the id of the element.\r\n    // If it's not given, it should create a new element. This should be handled by the renderer.\r\n    this.container = null;\r\n\r\n    // By default, the width and height of a `Game` instance will be as large as the inside of the browser window.\r\n    this.width = root.innerWidth;\r\n    this.height = root.innerHeight;\r\n    this.color = new Color(255, 255, 255);\r\n\r\n    this.assetLoader = new AssetLoader();\r\n\r\n    // Set the viewport object\r\n    this.viewport = Viewport;\r\n\r\n    // `this.activeScene` is set to `null` by default, but will change to the instance of the scene\r\n    // once a scene will be shown\r\n    this.activeScene = null;\r\n\r\n    // Trigger the graphics initializer\r\n    this.on('execute', () => {\r\n      Graphics.trigger('initialize', this)\r\n    });\r\n    \r\n    // A `Game` instance is the root element so the descriptor needs to be called directly,\r\n    // because it won't be added to anywhere else\r\n    this.call();\r\n    \r\n    // Mix in `renderable` and `updateable`\r\n    renderable.call(this);\r\n    updateable.call(this);\r\n\r\n    // Bind the game loop to the `update` event\r\n    Loop.on('update', (dt) => {\r\n      // Deltatime should not be a millisecond value, but a second one.\r\n      // It should be a value between 0 - 1\r\n      this.trigger('update', dt / 1000);\r\n    });\r\n\r\n    // Bind the game loop to the `render` event\r\n    Loop.on('render', () => {\r\n      this.trigger('render');\r\n    });\r\n\r\n    // Add a `resize` event to each `Game` instance\r\n    root.addEventListener('resize', () => {\r\n      var newWidth = root.innerWidth;\r\n      var newHeight = root.innerHeight;\r\n\r\n      this.trigger('resize', newWidth, newHeight);\r\n\r\n      // Trigger resize event for the current scene\r\n      var currentScene = this.children.byName(this.activeScene);\r\n\r\n      if (currentScene) {\r\n        currentScene.trigger('resize', root.innerWidth, root.innerHeight);\r\n      }\r\n    }, false);\r\n\r\n    // Add an `orientationchange` event to each `Game` instance\r\n    root.addEventListener('orientationchange', () => {\r\n      this.trigger('orientationchange');\r\n    }, false);\r\n  }\r\n\r\n  addScene() {\r\n    // When adding a scene, the dimension of scenes should be\r\n    // exactly as large as the `Game` instance itself\r\n    this.queue.push(addable(Scene, this.children, function (child) {\r\n      child.width = this.width;\r\n      child.height = this.height;\r\n    }).apply(this, arguments));\r\n  }\r\n\r\n  showScene(name) {\r\n    // TODO: Add transitions\r\n    this.children.forEach(scene => scene.visible = false);\r\n\r\n    // Set the `activeScene` property\r\n    this.activeScene = this.children.byName(name);\r\n    this.activeScene.visible = true;\r\n\r\n    if (this.activeScene) {\r\n      this.activeScene.trigger('resize', root.innerWidth, root.innerHeight);\r\n\r\n      // Trigger the `show` event\r\n      this.trigger('show', name, this.children[this.activeScene]);\r\n    }\r\n  }\r\n\r\n  preload(assets) {\r\n    this.assetLoader.assets = assets;\r\n\r\n    return this.assetLoader;\r\n  }\r\n\r\n  run(name) {\r\n    Graphics.trigger('add', this);\r\n    \r\n    this.on('executed', () => {\r\n      // Start the game loop\r\n      Loop.run();\r\n\r\n      if (!name) {\r\n        // If there's only no name, take the first scene\r\n        if (this.children.length >= 1) {\r\n          name = this.children.first().name;\r\n        }\r\n      }\r\n\r\n      // Show the scene if a parameter has been specified\r\n      this.showScene(name);\r\n    });\r\n  }\r\n}\r\n\r\nserializable(Game);\r\n\r\nexport default Game;\r\n"]}