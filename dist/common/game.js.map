{"version":3,"sources":["src/game.js"],"names":[],"mappings":"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","file":"src/game.js","sourcesContent":["import Loop from 'gamebox/loop';\nimport AssetLoader from 'gamebox/assetloader';\n\nimport Base from 'flockn/base';\nimport Graphics from 'flockn/graphics';\nimport Scene from 'flockn/scene';\nimport Color from 'flockn/types/color';\nimport Viewport from 'flockn/viewport';\n\nimport {addable, renderable, updateable, serializable} from 'flockn/mixins';\n\nvar root = window;\n\n// Game is the entry point for all games made with flockn.\n// Any number of `Scene` instances can be attached to a `Game` instance\nclass Game extends Base {\n  constructor(descriptor) {\n    // Extend the `Base` class\n    super('Game', descriptor);\n\n    // `this.container` is a string, which is the id of the element.\n    // If it's not given, it should create a new element. This should be handled by the renderer.\n    this.container = null;\n\n    // By default, the width and height of a `Game` instance will be as large as the inside of the browser window.\n    this.width = root.innerWidth;\n    this.height = root.innerHeight;\n    this.color = new Color(255, 255, 255);\n\n    this.assetLoader = new AssetLoader();\n\n    // Set the viewport object\n    this.viewport = Viewport;\n\n    // `this.activeScene` is set to `null` by default, but will change to the instance of the scene\n    // once a scene will be shown\n    this.activeScene = null;\n\n    // A `Game` instance is the root element so the descriptor needs to be called directly,\n    // because it won't be added to anywhere else\n    this.call();\n\n    Graphics.trigger('initialize', this);\n\n    // Mix in `renderable` and `updateable`\n    renderable.call(this);\n    updateable.call(this);\n\n    // Bind the game loop to the `update` event\n    Loop.on('update', (dt) => {\n      // Deltatime should not be a millisecond value, but a second one.\n      // It should be a value between 0 - 1\n      this.trigger('update', dt / 1000);\n    });\n\n    // Bind the game loop to the `render` event\n    Loop.on('render', () => {\n      this.trigger('render');\n    });\n\n    // Add a `resize` event to each `Game` instance\n    root.addEventListener('resize', () => {\n      var newWidth = root.innerWidth;\n      var newHeight = root.innerHeight;\n\n      this.trigger('resize', newWidth, newHeight);\n\n      // Trigger resize event for the current scene\n      var currentScene = this.children.byName(this.activeScene);\n\n      if (currentScene) {\n        currentScene.trigger('resize', root.innerWidth, root.innerHeight);\n      }\n    }, false);\n\n    // Add an `orientationchange` event to each `Game` instance\n    root.addEventListener('orientationchange', () => {\n      this.trigger('orientationchange');\n    }, false);\n  }\n\n  addScene() {\n    // When adding a scene, the dimension of scenes should be\n    // exactly as large as the `Game` instance itself\n    this.queue.push(addable(Scene, this.children, function (child) {\n      child.width = this.width;\n      child.height = this.height;\n    }).apply(this, arguments));\n  }\n\n  showScene(name) {\n    // TODO: Add transitions\n    this.children.forEach(scene => scene.visible = false);\n\n    // Set the `activeScene` property\n    this.activeScene = this.children.byName(name);\n    this.activeScene.visible = true;\n\n    if (this.activeScene) {\n      this.activeScene.trigger('resize', root.innerWidth, root.innerHeight);\n\n      // Trigger the `show` event\n      this.trigger('show', name, this.children[this.activeScene]);\n    }\n  }\n\n  preload(assets) {\n    this.assetLoader.assets = assets;\n\n    return this.assetLoader;\n  }\n\n  run(name) {\n    this.on('executed', () => {\n      // Start the game loop\n      Loop.run();\n\n      if (!name) {\n        // If there's only no name, take the first scene\n        if (this.children.length >= 1) {\n          name = this.children.first().name;\n        }\n      }\n\n      // Show the scene if a parameter has been specified\n      this.showScene(name);\n    });\n  }\n}\n\nserializable(Game);\n\nexport default Game;\n"]}